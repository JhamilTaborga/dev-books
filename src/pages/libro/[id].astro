---
// import '../../styles/global.css';
import { getCollection, render } from "astro:content";
import { SHOW_BUY_BUTTON } from "astro:env/server";
import Layout from "../../layouts/Layout.astro";
import BookScore from "../../components/BookScore.astro";

export async function getStaticPaths() {
  const books = await getCollection("books");

  return books.map( (book) => ({
    params: { id:book.slug },
    props: { book }
  }))
}

const { book } = Astro.props
const { data, slug } = book
const { title, author, img, readtime, description, buy } = data

const { Content } = await render(book)

//De esta forma le decimos al servidor que queremos que esta página siga siendo estática:
export const prerender = true
---

<Layout title={`${title} - Books`}>
  <div class="flex gap-10">
    <aside class="flex flex-col items-center gap-4">
      <a href="/" class="hover:underline opacity-70">Volver atrás</a>
      <img
        transition:name={`img-${slug}`} 
        class="rounded w-60 h-auto" 
        src={`/${img}`} 
        alt={title}>
<!--Si queremos que esta parte "BookScore" sea dinámica tenemos que agregar server:defer
    y tenemos que cambiar la configuración en Astro.config.mjs-->
<!--Lo único que queremos que no sea estático es este componente, esta parte de nuestra página,
    así usamos islas de servidor -->
      <BookScore server:defer id={slug}/>
       {
        SHOW_BUY_BUTTON && (
        <a
          class="text-black h-10 w-28 bg-gray-100 border border-white"
          href={buy.spain}>
            Compra aquí
        </a>
        )
       }
    </aside>

    <main class="max-w-3xl">
      <h1 class="text-4xl font-bold mb-4">{title}</h1>
      <div class="prose prose-invert">
        <Content />
      </div>
    </main>
  </div>
</Layout>

<!-- Cuando usamos esta forma notamos que hay una demora por el fetch.
      Para mejorar esto creamos el componente "BookScore.astro"

<script>
  Así también podemos usar JavaScript en el cliente, podemos hacer lo que queramos.
  Así utilizamos el SCORE_API_ENDPOINT en el cliente:
  import { SCORE_API_ENDPOINT } from "astro:env/client";

  const scoreElement = document.querySelector('#score')

  fetch(SCORE_API_ENDPOINT)
    .then(res => res.text())
    .then(scoreValue => {
      if(scoreElement) {
        scoreElement.innerHTML = `⭐ Puntuación: ${scoreValue.trim()}/5`
      }
    })
</script> -->